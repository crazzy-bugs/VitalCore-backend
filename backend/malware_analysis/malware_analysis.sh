#!/bin/bash

# Define tools directory
TOOLS_DIR=$(dirname "$0")

# Define endpoint URL
ENDPOINT="http://localhost/malware_logs"

# Retry configuration
MAX_RETRIES=3
RETRY_DELAY=2

# Check if a file path is provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <path_to_file>"
    exit 1
fi

FILE_TO_SCAN="$1"

if [ ! -f "$FILE_TO_SCAN" ]; then
    echo "Error: File $FILE_TO_SCAN does not exist."
    exit 1
fi

# Function to execute a tool and clean its output
run_tool() {
    local tool_cmd="$1"
    local remove_line="$2"
    local output

    # Execute the tool and capture its output
    output=$(eval "$tool_cmd" 2>&1)

    # Remove specific lines from the output if needed
    if [ -n "$remove_line" ]; then
        output=$(echo "$output" | grep -v "$remove_line")
    fi

    echo "$output"
}

# Initialize combined output
combined_output="Scan results for file: $FILE_TO_SCAN\n"

# Run sigcheck
echo "Running Sigcheck..."
sigcheck_output=$(run_tool "$TOOLS_DIR/sigcheck64.exe \"$FILE_TO_SCAN\"" "Sysinternals - www.sysinternals.com")
combined_output+="\n==================== Sigcheck Output ====================\n"
combined_output+="$sigcheck_output\n"

# Run capa
echo "Running Capa..."
capa_output=$(run_tool "python3 $TOOLS_DIR/capa/main.py \"$FILE_TO_SCAN\"" "DeprecationWarning: This is the last capa version supporting Python")
combined_output+="\n==================== Capa Output ====================\n"
combined_output+="$capa_output\n"

# Run Exiftool
echo "Running Exiftool..."
exiftool_output=$(run_tool "$TOOLS_DIR/exiftool \"$FILE_TO_SCAN\"" "")
combined_output+="\n==================== Exiftool Output ====================\n"
combined_output+="$exiftool_output\n"

# Run TrID
echo "Running TrID..."
trid_output=$(run_tool "$TOOLS_DIR/trid \"$FILE_TO_SCAN\"" "TrID/32 - File Identifier v2.24 - (C) 2003-16 By M.Pontello")
combined_output+="\n==================== TrID Output ====================\n"
combined_output+="$trid_output\n"

# Debug: Print combined output to the terminal
echo -e "\n$combined_output"

# Function to send results to the endpoint
send_to_endpoint() {
    local data="$1"
    local attempt=1

    while [ $attempt -le $MAX_RETRIES ]; do
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$ENDPOINT" -H "Content-Type: text/plain" --data "$data")
        if [ "$response" -eq 200 ]; then
            echo "Scan results successfully sent to the endpoint."
            return 0
        else
            echo "Attempt $attempt: Failed to send results (HTTP $response). Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
        fi
        attempt=$((attempt + 1))
    done

    echo "Failed to send results to the endpoint after $MAX_RETRIES attempts."
    return 1
}

# Send combined output to the endpoint
send_to_endpoint "$combined_output"
