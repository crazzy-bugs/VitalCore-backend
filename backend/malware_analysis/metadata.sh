# !/bin/bash

if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <path_to_file>"
    exit 1
fi

FILE_PATH="$1"

if [ ! -f "$FILE_PATH" ]; then
    echo "Error: File '$FILE_PATH' does not exist."
    exit 1
fi

SCRIPT_DIR=$(dirname "$(realpath "$0")") # Get the directory of the script
DB_PATH="$SCRIPT_DIR/malware_analysis.db"

SIGCHECK_PATH="$SCRIPT_DIR/sigcheck.exe"
CAPA_PATH="$SCRIPT_DIR/capa.exe"
STRINGS2_PATH="$SCRIPT_DIR/strings2.exe"
EXIFTOOL_PATH="$SCRIPT_DIR/exiftool.exe"
TRID_PATH="$SCRIPT_DIR/trid.exe"
SQLITE3_PATH="$SCRIPT_DIR/sqlite/sqlite3" # Path to sqlite3 executable

function run_sqlite3() {   # Function to run sqlite3 and fallback to local sqlite3
    if command -v sqlite3 &>/dev/null; then
        sqlite3 "$@"
    else
        echo "sqlite3 not found in PATH. Attempting to use local sqlite3 tool..."
        if [ -f "$SQLITE3_PATH" ]; then
            "$SQLITE3_PATH" "$@"
        else
            echo "Error: sqlite3 not found in $SCRIPT_DIR/sqlite."
            exit 1
        fi
    fi
}

for TOOL in "$SIGCHECK_PATH" "$CAPA_PATH" "$STRINGS2_PATH" "$EXIFTOOL_PATH" "$TRID_PATH" "$SQLITE3_PATH"; do
    if [ ! -f "$TOOL" ]; then
        echo "Error: $(basename "$TOOL") not found in $SCRIPT_DIR."
        exit 1
    fi
done

FILE_NAME=$(basename "$FILE_PATH") # Get the file name without path
SHA256_HASH=""
BASIC_DETAILS=""
BINARY_SIGNATURE=""
IDENTIFIED_CAPABILITIES=""
FILE_PROPERTIES=""
IMPORTS=""

echo "Processing file: $FILE_NAME"

echo "Ensuring database table exists..." # Ensure the database table exists if it doesn't
run_sqlite3 "$DB_PATH" <<EOF
CREATE TABLE IF NOT EXISTS malware_analysis (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_name TEXT NOT NULL,
    file_hash TEXT NOT NULL,
    basic_details TEXT,
    binary_signature TEXT,
    identified_capabilities TEXT,
    file_properties TEXT,
    imports TEXT
);
EOF

echo "Running sigcheck..."  # Run sigcheck and capture the output
SIGCHECK_OUTPUT=$("$SIGCHECK_PATH" -h "$FILE_PATH" 2>&1 | grep -v -E "^(Sigcheck v|Copyright|Sysinternals)")
if [ $? -ne 0 ]; then
    echo "Error running sigcheck.exe"
else
    BASIC_DETAILS="$SIGCHECK_OUTPUT"
    SHA256_HASH=$(echo "$SIGCHECK_OUTPUT" | grep -oP 'SHA256:\s*\K\S+' || echo "")
    if [ -z "$SHA256_HASH" ]; then
        echo "Warning: SHA256 hash not found."
    else
        echo "SHA256 Hash: $SHA256_HASH"
    fi
fi

echo "Running TrID..."
TRID_OUTPUT=$("$TRID_PATH" "$FILE_PATH" 2>&1)

if [ $? -ne 0 ]; then
    echo "Error running trid.exe"
else
    # Remove the unwanted lines using grep
    BINARY_SIGNATURE=$(echo "$TRID_OUTPUT" | grep -v -E "TrID/32 - File Identifier|Definitions found|Analyzing")
fi


echo "Running capa..."
CAPA_RAW_OUTPUT=$("$CAPA_PATH" -v "$FILE_PATH" 2>&1)
if [ $? -ne 0 ]; then
    echo "Error running capa.exe"
else    # Remove the unwanted lines using awk capa
    IDENTIFIED_CAPABILITIES=$(echo "$CAPA_RAW_OUTPUT" | awk '/total feature count/,0' | sed '/WARNING  capa\.capabilities/d')
fi

echo "Running exiftool..."
EXIFTOOL_OUTPUT=$("$EXIFTOOL_PATH" "$FILE_PATH" 2>&1)
if [ $? -ne 0 ]; then
    echo "Error running exiftool.exe"
else
    FILE_PROPERTIES="$EXIFTOOL_OUTPUT"
fi

echo "Running strings2..."   
STRINGS_OUTPUT=$("$STRINGS2_PATH" -l 8 -a "$FILE_PATH" 2>&1 | grep -i '\.dll$') # Only include .dll imports
if [ $? -ne 0 ]; then
    echo "Error running strings2.exe"
else
    IMPORTS="$STRINGS_OUTPUT"
fi

# Debugging outputs
echo "Debug: SHA256: $SHA256_HASH"
echo "Debug: Basic Details - Length: ${#BASIC_DETAILS}"
echo "Debug: Binary Signature - Length: ${#BINARY_SIGNATURE}"
echo "Debug: Identified Capabilities - Length: ${#IDENTIFIED_CAPABILITIES}"
echo "Debug: File Properties - Length: ${#FILE_PROPERTIES}"
echo "Debug: Imports - Length: ${#IMPORTS}"

# Escape variables for SQL insertion
BASIC_DETAILS=$(echo "$BASIC_DETAILS" | sed "s/'/''/g")
BINARY_SIGNATURE=$(echo "$BINARY_SIGNATURE" | sed "s/'/''/g")
IDENTIFIED_CAPABILITIES=$(echo "$IDENTIFIED_CAPABILITIES" | sed "s/'/''/g")
FILE_PROPERTIES=$(echo "$FILE_PROPERTIES" | sed "s/'/''/g")
IMPORTS=$(echo "$IMPORTS" | sed "s/'/''/g")

# Insert into SQLite database
echo "Inserting data into database..."
run_sqlite3 "$DB_PATH" <<EOF
INSERT INTO malware_analysis (
    file_name,
    file_hash,
    basic_details,
    binary_signature,
    identified_capabilities,
    file_properties,
    imports
) VALUES (
    '$FILE_NAME',
    '$SHA256_HASH',
    '$BASIC_DETAILS',
    '$BINARY_SIGNATURE',
    '$IDENTIFIED_CAPABILITIES',
    '$FILE_PROPERTIES',
    '$IMPORTS'
);
EOF

if [ $? -eq 0 ]; then
    echo "Data successfully inserted into database."
else
    echo "Error inserting data into database."
fi

echo "Processing complete."
